#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#define MAX_STACK_SIZE 100

typedef struct {
    int data[MAX_STACK_SIZE];
    int top;
} Stack;


void initStack(Stack *s) {
    s->top = -1;
}

int isEmpty(Stack *s) {
    return s->top == -1;
}

int isFull(Stack *s) {
    return s->top == MAX_STACK_SIZE - 1;
}

void push(Stack *s, int value) {
    if (isFull(s)) {
        fprintf(stderr, "Stack overflow\n");
        exit(EXIT_FAILURE);
    }
    s->data[++(s->top)] = value;
}

int pop(Stack *s) {
    if (isEmpty(s)) {
        fprintf(stderr, "Stack underflow\n");
        exit(EXIT_FAILURE);

    }
    return s->data[(s->top)--];
}

int evaluatePostfix(const char* expression) {
    Stack stack;
    initStack(&stack);
    char token;
    int i = 0;
    while ((token = expression[i]) != '\0') {
        if (isdigit(token)) {
            // Convert character to integer and push onto stack
            push(&stack, token - '0');
        } else if (token == ' ') {
            // Ignore spaces
            i++;
            continue;
        } else {
            // Assume the token is an operator and pop two operands
            int operand2 = pop(&stack);
            int operand1 = pop(&stack);
            int result;
            switch (token) {
                case '+': result = operand1 + operand2; break;
                case '-': result = operand1 - operand2; break;
                case '*': result = operand1 * operand2; break;
                case '/': result = operand1 / operand2; break;
                default:
                    fprintf(stderr, "Unknown operator: %c\n", token);
                    exit(EXIT_FAILURE);
            }
            push(&stack, result);
        }
        i++;
    }
    return pop(&stack);
}

int main() {
    char expression[100];
    printf("Enter a postfix expression: ");
    fgets(expression, sizeof(expression), stdin);
    // Remove newline character if present
    expression[strcspn(expression, "\n")] = '\0';

    int result = evaluatePostfix(expression);
    printf("Result of '%s' is: %d\n", expression, result);
    return 0;
}
